/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Entidades.*;
import AccesoADatos.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USUARIO
 */
public class popupCiudad extends javax.swing.JInternalFrame {

    private DefaultTableModel modeloTabla = new DefaultTableModel();

    /**
     * Creates new form popupCiudad
     */
    public popupCiudad() {
        initComponents();
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null); //Elimina encabezado de ventana
        crearTable();
        llenarTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectButton = new javax.swing.JButton();
        salirButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cityTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        setMaximumSize(new java.awt.Dimension(570, 420));
        setMinimumSize(new java.awt.Dimension(570, 420));
        setPreferredSize(new java.awt.Dimension(570, 420));
        getContentPane().setLayout(null);

        selectButton.setText("Activar");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(selectButton);
        selectButton.setBounds(320, 340, 140, 32);

        salirButton.setText("Salir");
        salirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirButtonActionPerformed(evt);
            }
        });
        getContentPane().add(salirButton);
        salirButton.setBounds(90, 340, 70, 32);

        cityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(cityTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 20, 453, 290);

        setBounds(115, 90, 570, 420);
    }// </editor-fold>//GEN-END:initComponents

    private void salirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_salirButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        Ciudad_Data cityOn = new Ciudad_Data();
        Ciudad city = new Ciudad();
        int id = Integer.valueOf(modeloTabla.getValueAt(cityTable.getSelectedRow(), 0).toString());
        city = cityOn.buscarCiudad2(id);
        cityOn.ActivarCiudad(city);
        ClearTable();
        llenarTable();
    }//GEN-LAST:event_selectButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cityTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton salirButton;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables

    private void crearTable() {
        modeloTabla.addColumn("idCiudad");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Provincia");
        modeloTabla.addColumn("Pa√≠s");
        cityTable.setModel(modeloTabla);
    }

    private void llenarTable() {
        List<Ciudad> ciudades = new ArrayList<>();
        Ciudad_Data inactivas = new Ciudad_Data();
        ciudades = inactivas.obtenerCiudadesInactiva();
        for (Ciudad city : ciudades) {
            modeloTabla.addRow(new Object[]{city.getIdCiudad(), city.getNombre(), city.getProvincia(), city.getPais()});
        }
    }

    private void ClearTable() {
        for (int i = 0; i < cityTable.getRowCount(); i++) {
            modeloTabla.removeRow(i);
            i -= 1;
        }
    }
}
